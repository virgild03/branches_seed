{
  "Job": [
    {
      "job1": {
        "title": "Développeur Fullstack",
        "description": "Un poste pour un développeur JS"
      }
    }
  ],
  "Candidate": [
    {
      "cand1": {
        "name": "Alice",
        "email": "alice@test.com"
      }
    }
  ],
  "exercise": [
    {
      "ex1": {
        "type": "QCM",
        "difficulty" : "FACILE",
        "statement": "Quelle est la sortie de console.log(typeof null) ?",
        "options": ["object", "null", "undefined", "number"],
        "expectedOutput": "object",
        "tags": ["JavaScript", "Types"],
        "timeLimit": 60,
        "score": 5
      }
    },
    {
      "ex2": {
        "type": "OpenQuestion",
        "statement": "Explique le fonctionnement de closures en JavaScript.",
        "expectedOutput": "Une closure est une fonction qui accède à des variables hors de son scope.",
        "tags": ["JavaScript"],
        "timeLimit": 120,
        "score": 10
      }
    },
    {
      "ex3": {
        "type": "CodingQuestion",
        "statement": "Écris une fonction qui inverse une chaîne.",
        "expectedOutput": "gnirts elpmas",
        "tags": ["JS", "Algorithm"],
        "timeLimit": 180,
        "score": 15
      }
    },
    {
      "exercise_python": {
        "difficulty": "MOYEN",
        "expectedOutput": "cba",
        "score": 15,
        "statement": "Écris une fonction qui inverse une chaîne entrée par l'utilisateur.",
        "tags": ["Python", "String"],
        "timeLimit": 60,
        "type": "CODING",
        "language": "python"
      }
    },
    {
      "exercise_javascript": {
        "difficulty": "MOYEN",
        "expectedOutput": "cba",
        "score": 15,
        "statement": "Écris une fonction NodeJS qui inverse une chaîne entrée par l'utilisateur.",
        "tags": ["JavaScript", "NodeJS", "String"],
        "timeLimit": 60,
        "type": "CODING",
        "language": "javascript"
      }
    },
    {
      "exercise_java": {
        "difficulty": "MOYEN",
        "expectedOutput": "cba",
        "score": 15,
        "statement": "Écris un programme Java qui lit une chaîne et l'affiche inversée.",
        "tags": ["Java", "String"],
        "timeLimit": 60,
        "type": "CODING",
        "language": "java"
      }
    },
    {
      "exercise_c": {
        "difficulty": "MOYEN",
        "expectedOutput": "cba",
        "score": 15,
        "statement": "Écris un programme en C qui lit une chaîne de caractères et l'affiche inversée.",
        "tags": ["C", "String"],
        "timeLimit": 60,
        "type": "CODING",
        "language": "c"
      }
    },
    {
      "exercise_cpp": {
        "difficulty": "MOYEN",
        "expectedOutput": "cba",
        "score": 15,
        "statement": "Écris un programme en C++ qui lit une chaîne et affiche sa version inversée.",
        "tags": ["C++", "String"],
        "timeLimit": 60,
        "type": "CODING",
        "language": "cpp"
      }
    }
  ],
  "Challenge": [
    {
      "chal1": {
        "jobId": "job1",
        "title": "Test technique JS",
        "exercises": ["exercise/ex1", "exercise/ex2", "exercise/ex3"]
      }
    }
  ],
  "Answers": [
    {
      "ans1": {
        "questionId": "ex1",
        "value": "object"
      }
    },
    {
      "ans2": {
        "questionId": "ex2",
        "value": "Une closure est une fonction qui accède à des variables hors de son scope."
      }
    },
    {
      "ans3": {
        "questionId": "ex3",
        "value": "function reverse(str) { return str.split('').reverse().join(''); }"
      }
    },
    {
      "answer_python_1": {
        "candidateId": "Candidate/cand1",
        "questionId": "exercise/exercise_python",
        "value": "def reverse(s): return s[::-1]\ns = input()\nprint(reverse(s))",
        "output": "cba",
        "candidateOutput": "",
        "corrected": false,
        "isCorrect": false,
        "score": 0,
        "language": "python"
      }
    },
    {
      "answer_javascript_1": {
        "candidateId": "Candidate/cand1",
        "questionId": "exercise/exercise_javascript",
        "value": "function reverse(s) { return s.split('').reverse().join(''); }\nconst s = require('readline').createInterface({ input: process.stdin, output: process.stdout });\ns.question('', input => { console.log(reverse(input)); s.close(); });",
        "output": "cba",
        "candidateOutput": "",
        "corrected": false,
        "isCorrect": false,
        "score": 0,
        "language": "javascript"
      }
    },
    {
      "answer_java_1": {
        "candidateId": "Candidate/cand1",
        "questionId": "exercise/exercise_java",
        "value": "import java.util.*;\nclass temp { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String s = sc.nextLine(); System.out.println(new StringBuilder(s).reverse().toString()); } }",
        "output": "cba",
        "candidateOutput": "",
        "corrected": false,
        "isCorrect": false,
        "score": 0,
        "language": "java"
      }
    },
    {
      "answer_c_1": {
        "candidateId": "Candidate/cand1",
        "questionId": "exercise/exercise_c",
        "value": "#include <stdio.h>\n#include <string.h>\nint main() { char s[100]; scanf(\"%s\", s); for(int i=strlen(s)-1;i>=0;i--) printf(\"%c\", s[i]); return 0; }",
        "output": "cba",
        "candidateOutput": "",
        "corrected": false,
        "isCorrect": false,
        "score": 0,
        "language": "c"
      }
    },
    {
      "answer_cpp_1": {
        "candidateId": "Candidate/cand1",
        "questionId": "exercise/exercise_cpp",
        "value": "#include <iostream>\n#include <string>\nusing namespace std;\nint main() { string s; cin >> s; reverse(s.begin(), s.end()); cout << s; return 0; }",
        "output": "cba",
        "candidateOutput": "",
        "corrected": false,
        "isCorrect": false,
        "score": 0,
        "language": "cpp"
      }
    }

  ],
  "CandidateAnswer": [
    {
      "candAns1": {
        "candidateId": "cand1",
        "jobId": "job1",
        "answers": ["Answers/ans1", "Answers/ans2", "Answers/ans3"]
      }
    }
  ]
}
